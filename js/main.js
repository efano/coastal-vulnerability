const options = {
  //center: [36, -80],
  //zoom: 4,
  zoomControl: false,
  zoomSnap: .1
};
const map = L.map("map", options);

L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager_nolabels/{z}/{x}/{y}{r}.png', {
  attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
  subdomains: 'abcd',
  maxZoom: 19
}).addTo(map);

map.createPane("labels");
map.getPane("labels").style.zIndex = 349;
map.getPane("labels").style.pointerEvents = "none";
L.tileLayer(
  "https://{s}.basemaps.cartocdn.com/rastertiles/voyager_only_labels/{z}/{x}/{y}{r}.png", {
    pane: "labels",
    opacity: 0.4,
    minZoom: 7
  }
).addTo(map);

map.addControl(L.control.zoom({
  position: 'topright'
}));

var dataLayer, attribute = "CVI";

$.getJSON("data/all-beaches.json", function (data) {
  dataLayer = L.geoJson(data, {
    pointToLayer: function (feature, latlng) {
      return L.circleMarker(latlng, {
        color: '#555',
        weight: .5,
        fillOpacity: 1,
        radius: 4
      });
    }
  }).addTo(map);

  map.fitBounds(dataLayer.getBounds(), {
    padding: [18, 18]
  });

  drawMap(dataLayer);
  buildUI();

  function buildUI() {
    $('select[id="selectionControl"]').change(function () {
      attribute = $(this).val();
      drawMap(dataLayer);
    });
  }
});

function getColor(d) {
  if (d == "Very High") {
    return '#e53935'
  } else if (d == "High") {
    return '#FB8C00'
  } else if (d == "Moderate") {
    return '#fdd226'
  } else if (d == "Low") {
    return '#00ACC1'
  } else if (d == "Very Low") {
    return '#1565C0'
  }
};

function drawMap(dataLayer) {
  var breaks = getClassBreaks(dataLayer);
  dataLayer.eachLayer(function (layer) {
    var props = layer.feature.properties;
    var colorsCVI = getColor(props["CVI"]);
    var colorsErosion = getColor(props["EROSION"]);
    var colorsGeomorph = getColor(props["GEOMORPH"]);
    var colorsSeaLevel = getColor(props["SEA_LEVEL"]);
    var colorsSlope = getColor(props["SLOPE"]);
    var colorsTides = getColor(props["TIDES"]);
    var colorsWaves = getColor(props["WAVES"]);

    layer.setStyle({
      fillColor: getColor(props[attribute], breaks),
    });

    layer.bindTooltip("<div class=tooltipTitle><b>" + props["FEATURE_NA"] + "</b><br></div>" +
      "Vulnerability (CVI): " + '<a style="color:' + colorsCVI + '"> ' + "<b>" + (props[
        "CVI"]) + '</b></a>' +
      "<hr>" +
      "Shoreline Erosion: " + '<a style="color:' + colorsErosion + '"> ' + "<b>" + (props[
        "EROSION"]) +
      '</b></a><br>' +
      "Geomorphology: " + '<a style="color:' + colorsGeomorph + '"> ' + "<b>" + (props[
        "GEOMORPH"]) + '</b></a><br>' +
      "Relative Sea-level Change: " + '<a style="color:' + colorsSeaLevel + '"> ' + "<b>" + (
        props[
          "SEA_LEVEL"]) + '</b></a><br>' +
      "Slope Percent: " + '<a style="color:' + colorsSlope + '"> ' + "<b>" + (props[
        "SLOPE"]) +
      '</b></a><br>' +
      "Mean Tide Range: " + '<a style="color:' + colorsTides + '"> ' + "<b>" + (props[
        "TIDES"]) +
      '</b></a><br>' +
      "Mean Wave Height: " + '<a style="color:' + colorsWaves + '"> ' + "<b>" + (props[
        "WAVES"]) +
      '</b></a><br>'

    );

    layer.on('mouseover', function () {
      layer.setStyle({
        color: '#333',
        weight: 1,
        radius: 8
      }).bringToFront();
    });
    layer.on('mouseout', function () {
      layer.setStyle({
        color: '#555',
        weight: .5,
        radius: 4
      });
    });
  });
};

function getClassBreaks(dataLayer) {
  var values = [];
  dataLayer.eachLayer(function (layer) {
    var value = layer.feature.properties[attribute];
    values.push(value);
  });
};

function drawLegend() {
  var legend = L.control({
    class: 'legend'
  });
  legend.onAdd = function (map) {
    var div = L.DomUtil.create('div', 'legend');
    div.innerHTML +=
      '<i style="background: #e53935"></i><span>Very High</span><br>';
    div.innerHTML +=
      '<i style="background: #FB8C00"></i><span>High</span><br>';
    div.innerHTML +=
      '<i style="background: #fdd226"></i><span>Moderate</span><br>';
    div.innerHTML +=
      '<i style="background: #00ACC1"></i><span>Low</span><br>';
    div.innerHTML +=
      '<i style="background: #1565C0"></i><span>Very Low</span><br>';
    return div;
  };
  legend.addTo(map);
};
drawLegend();